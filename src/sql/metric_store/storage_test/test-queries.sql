-- Queries generated by the default "DB overview Unprivileged / Developer mode
-- NB! Change/replace the time thresholds, here e.g. 2019-02-21T12:00:00Z and 2019-02-21T18:00:00Z
-- and maybe use some Bash like below to see how it performs:
-- ```for i in {1..10} ; do time psql -d pgwatch3_metrics -U pgwatch3 -f test-queries.sql &>/dev/null ; done```
-- FYI - real life performance should be better though as Grafana uses persistent connections and parallel workers,
-- so total runtime of 1-2 seconds should be fine. Also note that selecting timeranges at the end of the dataset
-- (should be the typical case) is much faster than from the middle

select
  floor(extract(epoch from time)/600)*600 AS "time",
  avg((c - c_lag) / extract(epoch from time - time_lag)) as qps
from (
        select 
          (data->>'calls')::int8 as c, lag((data->>'calls')::int8) over w as c_lag,
          time, lag(time) over w as time_lag
        from stat_statements_calls
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)        
) x
where c >= c_lag
group by 1
order by 1;


select
floor(extract(epoch from time)/600)*600 AS "time",
avg((tt-tt_lag)::numeric / (c-c_lag))

from (

        select 
          (data->>'total_time')::float8 as tt, lag((data->>'total_time')::float8) over w as tt_lag,
          (data->>'calls')::int8 as c, lag((data->>'calls')::int8) over w as c_lag,
          time
        from stat_statements_calls
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where c > c_lag and tt >= tt_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/600)*600 AS "time",
  avg(((c - c_lag) + (r - r_lag)) / extract(epoch from time - time_lag)) as tps
from (
        select 
          (data->>'xact_commit')::int8 as c, lag((data->>'xact_commit')::int8) over w as c_lag,
          (data->>'xact_rollback')::int8 as r, lag((data->>'xact_rollback')::int8) over w as r_lag,
          time, lag(time) over w as time_lag
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)        
) x
where c >= c_lag and r >= r_lag and time > time_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/600)*600 AS "time",
  avg(nb) as "# Sessions"
from (
        select 
          (data->>'numbackends')::int8 as nb,
          time
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
) x
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg((tb-tb_lag) / (etime - lag_etime)) as "Temp bytes (5m avg)"
from (
        select 
          (data->>'temp_bytes')::int8 as tb, lag((data->>'temp_bytes')::int8) over w as tb_lag,
          (extract(epoch from time))::int8 as etime,
          (lag(extract(epoch from time)) over w)::int8 as lag_etime,
          time
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where tb >= tb_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg(size_b) as "DB Size"
from (
        select 
          (data->>'size_b')::int8 as size_b,
          time
        from db_size
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
) x
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg(nb) as "# Sessions",
  avg(((dl-dl_lag) * extract(epoch from '5m'::interval)) / (etime - etime_lag)) as "Deadlocks (5m rate)"
from (
        select 
          (data->>'numbackends')::int8 as nb,
          (data->>'deadlocks')::int8 as dl, lag((data->>'deadlocks')::int8) over w as dl_lag,
          (extract(epoch from time))::int8 as etime,
          (lag(extract(epoch from time)) over w)::int8 as etime_lag,
          time
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where dl >= dl_lag and etime > etime_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg((wal-wal_lag) / (etime-etime_lag)) as "WAL rate"
from (
        select 
          (data->>'xlog_location_b')::int8 as wal, lag((data->>'xlog_location_b')::int8) over w as wal_lag,
          extract(epoch from time) as etime,
          time, lag(extract(epoch from time)) over w as etime_lag
        from wal
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where wal >= wal_lag and etime > etime_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg(case when c=c_lag then null else (tt-tt_lag)::numeric / (c-c_lag) end) as "avg_query_runtime"
from (

        select 
          (data->>'total_time')::float8 as tt, lag((data->>'total_time')::float8) over w as tt_lag,
          (data->>'calls')::int8 as c, lag((data->>'calls')::int8) over w as c_lag,
          time
        from stat_statements_calls
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where c >= c_lag and tt >= tt_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg((ins-ins_lag) * (extract(epoch from '5m'::interval)) / extract(epoch from time - time_lag)) as "INSERT",
  avg((upd-upd_lag) * (extract(epoch from '5m'::interval)) / extract(epoch from time - time_lag)) as "UPDATE",
  avg((del-del_lag) * (extract(epoch from '5m'::interval)) / extract(epoch from time - time_lag)) as "DELETE"
from (
        select 
          (data->>'tup_inserted')::int8 as ins, lag((data->>'tup_inserted')::int8) over w as ins_lag,
          (data->>'tup_updated')::int8 as upd, lag((data->>'tup_updated')::int8) over w as upd_lag,
          (data->>'tup_deleted')::int8 as del, lag((data->>'tup_deleted')::int8) over w as del_lag,
          time, lag(time) over w as time_lag
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where ins >= ins_lag and time > time_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/3600)*3600 AS "time",
  avg( ((tb-tb_lag)*3600) / (etime - lag_etime)) as "Temp bytes (1h rate)"
from (
        select 
          (data->>'temp_bytes')::int8 as tb, lag((data->>'temp_bytes')::int8) over w as tb_lag,
          (extract(epoch from time))::int8 as etime,
          (lag(extract(epoch from time)) over w)::int8 as lag_etime,
          time
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where tb >= tb_lag and etime > lag_etime
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg(((c - c_lag) + (r - r_lag)) / extract(epoch from time - time_lag)) as "TPS"
from (
        select 
          (data->>'xact_commit')::int8 as c, lag((data->>'xact_commit')::int8) over w as c_lag,
          (data->>'xact_rollback')::int8 as r, lag((data->>'xact_rollback')::int8) over w as r_lag,
          time, lag(time) over w as time_lag
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)        
) x
where c >= c_lag and r >= r_lag and time > time_lag
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg((c - c_lag) / extract(epoch from time - time_lag)) as "QPS"
from (
        select 
          (data->>'calls')::int8 as c, lag((data->>'calls')::int8) over w as c_lag,
          time, lag(time) over w as time_lag
        from stat_statements_calls
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)        
) x
where c >= c_lag and time > time_lag
group by 1
order by 1;


select
  time,
  last_value-first_value as size_diff
from (
  select
    date_trunc('hour', time) as time,
    first_value((data->>'size_b')::int8) over w,
    last_value((data->>'size_b')::int8) over w
  from
    db_size
  where 
    dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
  window w as (
     partition by date_trunc('hour', time) order by time rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  )
) x
group by 1, 2
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  avg((hit-hit_lag)::numeric / ((hit-hit_lag) + (read-read_lag)))*100 as "Shared buffers hit ratio",
  avg((roll-roll_lag)::numeric / ((roll-roll_lag) + (comm-comm_lag)))*100 as "TX rollback ratio"
from (
        select 
          (data->>'blks_hit')::int8 as hit, lag((data->>'blks_hit')::int8) over w as hit_lag,
          (data->>'blks_read')::int8 as read, lag((data->>'blks_read')::int8) over w as read_lag,
          (data->>'xact_rollback')::int8 as roll, lag((data->>'xact_rollback')::int8) over w as roll_lag,
          (data->>'xact_commit')::int8 as comm, lag((data->>'xact_commit')::int8) over w as comm_lag,
          time
        from db_stats
        where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
        window w as (order by time)
) x
where (hit > hit_lag or read > read_lag) and (roll > roll_lag or comm > comm_lag)
group by 1
order by 1;


select
  time,
  sum(seq_scan) as seq_scan
from (
  select
    floor(extract(epoch from time)/300)*300 AS "time",
    table_full_name,
    avg((((scan - scan_lag) * (extract(epoch from '5m'::interval))) / extract(epoch from time - time_lag))) as seq_scan
  from (
          select 
            (data->>'seq_scan')::int8 as scan, lag((data->>'seq_scan')::int8) over w as scan_lag,
            time, lag(time) over w as time_lag,
            tag_data->>'table_full_name' as table_full_name
          from table_stats
          where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
          and (data->>'table_size_b')::int8  > 10000000
          window w as (partition by tag_data->>'table_full_name' order by time)        
    ) x
    where scan >= scan_lag and time > time_lag
    group by 1, 2
) y
group by 1
order by 1;


select
  floor(extract(epoch from time)/300)*300 AS "time",
  lockmode,
  max(lock_count) as lock_count
from (
    select 
      (data->>'count')::int8 as lock_count,
      tag_data->>'lockmode' as lockmode,
      time
    from locks_mode
    where dbname = 'adhoc-1' and time BETWEEN '2019-02-21T12:00:00Z' AND '2019-02-21T18:00:00Z'
    and tag_data->>'lockmode' LIKE '%Exclusive%'
) x
group by 1, 2
order by 1, 2;
