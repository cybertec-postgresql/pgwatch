services:
  postgres:
    user: postgres
    # Custom Dockerfile.postgres within build section is used to enable plpython3u extension.
    # Comment out the build section to use the default PostgreSQL or TimescaleDB image.
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.postgres-plpython3u

    # If you want PostgreSQL pure vanilla experience use:
    # image: &pgimage "postgres:latest"

    # If you want to use TimescaleDB extension use:
    # image: &pgimage timescale/timescaledb:latest-pg16
    # and update the command section below with
    #  "-cshared_preload_libraries=pg_stat_statements,timescaledb"

    image: &pgimage postgres-plpython3u:latest
    command:
      - "-cshared_preload_libraries=pg_stat_statements"
      - "-cpg_stat_statements.track=all"
      - "-ctrack_io_timing=on"
      - "-ctrack_functions=pl"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - "./docker/bootstrap/create_role_db.sql:/docker-entrypoint-initdb.d/create_role_db.sql"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    # to use latest Grafana v11, update the dashboards provisioning folder below
    image: grafana/grafana:10.4.7
    user: "0:0"
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: pgwatch_grafana
      GF_DATABASE_USER: pgwatch
      GF_DATABASE_PASSWORD: pgwatchadmin
      GF_DATABASE_SSL_MODE: disable
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/1-global-db-overview.json
      GF_INSTALL_PLUGINS: marcusolsson-treemap-panel
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - "./grafana/postgres_datasource.yml:/etc/grafana/provisioning/datasources/pg_ds.yml"
      - "./grafana/postgres_dashboard.yml:/etc/grafana/provisioning/dashboards/pg_db.yml"
      # Uncomment the dashboard version you want to use and comment out the other one.
      - "./grafana/postgres/v10:/var/lib/grafana/dashboards"
      # - "./grafana/postgres/v11:/var/lib/grafana/dashboards"
    depends_on:
      postgres:
        condition: service_healthy

  pgwatch:
    # uncomment build section below for dev experience
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: cybertecpostgresql/pgwatch:latest
    environment:
      PW_SOURCES: postgresql://pgwatch@postgres:5432/pgwatch
      PW_SINK: postgresql://pgwatch@postgres:5432/pgwatch_metrics
    # command:
    #   - "--log-level=debug"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  add-test-db:
    image: *pgimage
    environment:
      PGHOST: postgres
      PGUSER: postgres # we need superuser to create extensions
      PGDATABASE: pgwatch
    command: >
      psql -v ON_ERROR_STOP=1
        -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements"
        -c "CREATE EXTENSION IF NOT EXISTS plpython3u;
            CREATE FUNCTION get_load_average(OUT load_1min float, OUT load_5min float, OUT load_15min float) AS '
              from os import getloadavg
              la = getloadavg()
              return [la[0], la[1], la[2]]'
            LANGUAGE plpython3u VOLATILE;
            GRANT EXECUTE ON FUNCTION get_load_average() TO pgwatch"
        -c "GRANT EXECUTE ON FUNCTION pg_stat_file(text) TO pgwatch"
        -c "GRANT EXECUTE ON FUNCTION pg_stat_file(text, boolean) TO pgwatch"
        -c "INSERT INTO pgwatch.source (name, preset_config, connstr)
          SELECT 'demo', 'exhaustive', 'postgresql://pgwatch:pgwatchadmin@postgres/pgwatch'
          WHERE NOT EXISTS (SELECT * FROM pgwatch.source WHERE name = 'demo')"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - add-test-db

  pgbench:
    image: *pgimage
    environment:
      PGHOST: postgres
      PGUSER: pgwatch
      PGDATABASE: pgwatch
    command: >
      sh -c "pgbench --initialize --scale=50 && 
        pgbench --progress=5 --client=10 --jobs=2 --transactions=10000 && 
        pgbench --initialize --init-steps=d"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - pgbench

  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - "./docker/prometheus.yml:/etc/prometheus/prometheus.yml"
    profiles:
      - prometheus

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - "./docker/pgadmin_servers.json:/pgadmin4/servers.json"
      - "./docker/pgadmin_pass:/pgadmin4/pass"
    ports:
      - "80:80"
    profiles:
      - pgadmin
