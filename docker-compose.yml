version: "3.9"

services:
  postgres:
    # if you want PostgreSQL vanilla experience :
    # - use "postgres:latest" image 
    # - remove "timescaledb" from shared_preload_libraries
    image: &pgimage timescale/timescaledb:latest-pg16
    user: postgres
    command:
      - "-cshared_preload_libraries=pg_stat_statements,timescaledb"
      - "-cpg_stat_statements.track=all"
      - "-ctrack_io_timing=on"
      - "-ctrack_functions=pl"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - "./docker/bootstrap/create_role_db.sql:/docker-entrypoint-initdb.d/create_role_db.sql"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    user: "0:0"
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: pgwatch3_grafana
      GF_DATABASE_USER: pgwatch3
      GF_DATABASE_PASSWORD: pgwatch3admin
      GF_DATABASE_SSL_MODE: disable
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/1-global-db-overview.json
      GF_INSTALL_PLUGINS: marcusolsson-treemap-panel
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - "./grafana/postgres_datasource.yml:/etc/grafana/provisioning/datasources/pg_ds.yml"
      - "./grafana/postgres_dashboard.yml:/etc/grafana/provisioning/dashboards/pg_db.yml"
      - "./grafana/postgres/v10:/var/lib/grafana/dashboards"
    depends_on:
      postgres:
        condition: service_healthy

  pgwatch3:
    # uncomment build section below for dev experience
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: cybertecpostgresql/pgwatch3:latest
    environment:
      PW3_CONFIG: postgresql://pgwatch3@postgres:5432/pgwatch3
      PW3_SINK: postgresql://pgwatch3@postgres:5432/pgwatch3_metrics
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy


  add-test-db:
    image: *pgimage
    environment:
      PGHOST: postgres
      PGUSER: postgres # we need superuser to create extensions
      PGDATABASE: pgwatch3
    command: >
      psql -v ON_ERROR_STOP=1
        -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements"
        -c "GRANT EXECUTE ON FUNCTION pg_stat_file(text) TO pgwatch3"
        -c "GRANT EXECUTE ON FUNCTION pg_stat_file(text, boolean) TO pgwatch3"
        -c "INSERT INTO pgwatch3.source (name, preset_config, connstr)
          SELECT 'demo', 'exhaustive', 'postgresql://pgwatch3:pgwatch3admin@postgres/pgwatch3'
          WHERE NOT EXISTS (SELECT * FROM pgwatch3.source WHERE name = 'demo')"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - add-test-db

  pgbench:
    image: *pgimage
    environment:
      PGHOST: postgres
      PGUSER: pgwatch3
      PGDATABASE: pgwatch3
    command: >
      sh -c "pgbench --initialize --scale=50 && 
        pgbench --progress=5 --client=10 --jobs=2 --transactions=10000 && 
        pgbench --initialize --init-steps=d"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - pgbench

  # prometheus:
  #   image: prom/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #     - 9090:9090
  #   restart: unless-stopped
  #   volumes:
  #     - "./docker/prometheus.yml:/etc/prometheus/prometheus.yml"
