- name: test1  # an arbitrary name for the monitored DB. functions also as prefix for found DBs if using continuous discovery "dbtype"-s
                      # Should be chosen carefully - cannot be (easily) changed for the already stored metric data!
  kind: postgres    # postgres|postgres-continuous-discovery|pgbouncer|pgpool|patroni|patroni-continuous-discovery|patroni-namespace-discovery
                      # defaults to postgres if not specified
  conn_str: postgresql://pgwatch:pgwatchadmin@localhost/pgwatch
  is_superuser: false # setting to true will try to auto-create all metric fetching "helpers"
  preset_metrics: exhaustive # from list of presets defined in "metrics/preset-configs.yaml"
  custom_metrics:    # if both preset and custom are specified, custom wins
  preset_metrics_standby: # optional metrics configuration for standby / replica state, v1.8.1+
  custom_metrics_standby:
  include_pattern: # regex to filter databases to actually monitor for the "continuous" modes
  exclude_pattern:
  is_enabled: true
  group: default # just for logical grouping of DB hosts or for "sharding", i.e. splitting the workload between many gatherer daemons
  custom_tags:      # option to add arbitrary tags (Influx / Postgres storage only) for every stored data row,
    aws_instance_id: i-0af01c0123456789a       # for example to fetch data from some other source onto a same Grafana graph
  sslrootcert: ''
  sslcert: ''
  sslkey: ''

- name: test2
  kind: patroni-continuous-discovery
  host_config:    # used for storing patroni connect info (dbtype=patroni|patroni-continuous-discovery) or log parsing settings
    dcs_type: etcd
    dcs_endpoints: ["http://localhost:2379"]
    scope: batman
    namespace: /service/
    username:
    password:
    ca_file:
    cert_file:
    key_file:
    logs_glob_path: "/tmp/*.csv"
    logs_match_regex: ^(?P<log_time>.*?),"?(?P<user_name>.*?)"?,"?(?P<database_name>.*?)"?,(?P<process_id>\d+),"?(?P<connection_from>.*?)"?,(?P<session_id>.*?),(?P<session_line_num>\d+),"?(?P<command_tag>.*?)"?,(?P<session_start_time>.*?),(?P<virtual_transaction_id>.*?),(?P<transaction_id>.*?),(?P<error_severity>\w+),
#    logs_match_regex: '^(?P<log_time>.*) \[(?P<process_id>\d+)\] (?P<user_name>.*)@(?P<database_name>.*?) (?P<error_severity>.*?): ' # a sample regex (Debian / Ubuntu default) if not using CSVLOG
  stmt_timeout: 5
  preset_metrics:
  custom_metrics:
    wal: 60
  dbname_include_pattern: (bar|postgres)
  dbname_exclude_pattern:
  is_enabled: false
  only_if_master: true # don't gather metrics from standby servers

- name: pgbouncer
  conn_str: postgresql://pgwatch:pgwatchadmin@localhost/pgwatch
  custom_metrics: 
    pgbouncer_stats: 10
    pgbouncer_clients: 10
  is_enabled: true
  sslrootcert: ''
  sslcert: ''
  sslkey: ''  

- name: envvar
  kind: $kind
  is_enabled: true
  include_pattern: $include_pattern
  exclude_pattern: $exclude_pattern
  preset_metrics: $preset_metrics
  preset_metrics_standby: $preset_metrics_standby